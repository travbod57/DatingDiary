#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatingDiary.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Windows.Media.Imaging;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DatingAppDB")]
	public partial class DatingAppContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    //partial void InsertCountry(Country instance);
    //partial void UpdateCountry(Country instance);
    //partial void DeleteCountry(Country instance);
    partial void InsertDate(Date instance);
    partial void UpdateDate(Date instance);
    partial void DeleteDate(Date instance);
    partial void InsertInterest(Interest instance);
    partial void UpdateInterest(Interest instance);
    partial void DeleteInterest(Interest instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    #endregion
		
		public DatingAppContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public DatingAppContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
        //public System.Data.Linq.Table<Country> Countries
        //{
        //    get
        //    {
        //        return this.GetTable<Country>();
        //    }
        //}
		
		public System.Data.Linq.Table<Date> Dates
		{
			get
			{
				return this.GetTable<Date>();
			}
		}
		
		public System.Data.Linq.Table<Interest> Interests
		{
			get
			{
				return this.GetTable<Interest>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
	}
	
    //[Table(Name="Countries")]
    //public partial class Country : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
    //{
		
    //    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
    //    private int _Id;
		
    //    private string _Name;
		
    //    private EntitySet<Person> _Persons;
		
    //#region Extensibility Method Definitions
    //partial void OnLoaded();
    //partial void OnValidate(System.Data.Linq.ChangeAction action);
    //partial void OnCreated();
    //partial void OnIdChanging(int value);
    //partial void OnIdChanged();
    //partial void OnNameChanging(string value);
    //partial void OnNameChanged();
    //#endregion
		
    //    public Country()
    //    {
    //        this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
    //        OnCreated();
    //    }
		
    //    [Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
    //    public int Id
    //    {
    //        get
    //        {
    //            return this._Id;
    //        }
    //        set
    //        {
    //            if ((this._Id != value))
    //            {
    //                this.OnIdChanging(value);
    //                this.SendPropertyChanging();
    //                this._Id = value;
    //                this.SendPropertyChanged("Id");
    //                this.OnIdChanged();
    //            }
    //        }
    //    }
		
    //    [Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
    //    public string Name
    //    {
    //        get
    //        {
    //            return this._Name;
    //        }
    //        set
    //        {
    //            if ((this._Name != value))
    //            {
    //                this.OnNameChanging(value);
    //                this.SendPropertyChanging();
    //                this._Name = value;
    //                this.SendPropertyChanged("Name");
    //                this.OnNameChanged();
    //            }
    //        }
    //    }
		
    //    [Association(Name="FK_CountryPerson", Storage="_Persons", ThisKey="Id", OtherKey="CountryId", DeleteRule="NO ACTION")]
    //    public EntitySet<Person> Persons
    //    {
    //        get
    //        {
    //            return this._Persons;
    //        }
    //        set
    //        {
    //            this._Persons.Assign(value);
    //        }
    //    }
		
    //    public event PropertyChangingEventHandler PropertyChanging;
		
    //    public event PropertyChangedEventHandler PropertyChanged;
		
    //    protected virtual void SendPropertyChanging()
    //    {
    //        if ((this.PropertyChanging != null))
    //        {
    //            this.PropertyChanging(this, emptyChangingEventArgs);
    //        }
    //    }
		
    //    protected virtual void SendPropertyChanged(String propertyName)
    //    {
    //        if ((this.PropertyChanged != null))
    //        {
    //            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    //        }
    //    }
		
    //    private void attach_Persons(Person entity)
    //    {
    //        this.SendPropertyChanging();
    //        entity.Country = this;
    //    }
		
    //    private void detach_Persons(Person entity)
    //    {
    //        this.SendPropertyChanging();
    //        entity.Country = null;
    //    }
    //}
	
	[Table(Name="Dates")]
	public partial class Date : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateOfMeeting;
		
		private int _PersonId;
		
		private int _VenueId;
		
		private double _Rating;
		
		private System.Nullable<bool> _IsFavourite;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<Photo> _Photos;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Venue> _Venue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateOfMeetingChanging(System.DateTime value);
    partial void OnDateOfMeetingChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnVenueIdChanging(int value);
    partial void OnVenueIdChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    partial void OnIsFavouriteChanging(System.Nullable<bool> value);
    partial void OnIsFavouriteChanged();
    #endregion
		
		public Date()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Person = default(EntityRef<Person>);
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfMeeting", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfMeeting
		{
			get
			{
				return this._DateOfMeeting;
			}
			set
			{
				if ((this._DateOfMeeting != value))
				{
					this.OnDateOfMeetingChanging(value);
					this.SendPropertyChanging();
					this._DateOfMeeting = value;
					this.SendPropertyChanged("DateOfMeeting");
					this.OnDateOfMeetingChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_VenueId", DbType="Int NOT NULL")]
		public int VenueId
		{
			get
			{
				return this._VenueId;
			}
			set
			{
				if ((this._VenueId != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIdChanging(value);
					this.SendPropertyChanging();
					this._VenueId = value;
					this.SendPropertyChanged("VenueId");
					this.OnVenueIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_IsFavourite", DbType="Bit")]
		public System.Nullable<bool> IsFavourite
		{
			get
			{
				return this._IsFavourite;
			}
			set
			{
				if ((this._IsFavourite != value))
				{
					this.OnIsFavouriteChanging(value);
					this.SendPropertyChanging();
					this._IsFavourite = value;
					this.SendPropertyChanged("IsFavourite");
					this.OnIsFavouriteChanged();
				}
			}
		}
		
		[Association(Name="FK_DateNote", Storage="_Notes", ThisKey="Id", OtherKey="DateId", DeleteRule="NO ACTION")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[Association(Name="FK_DatePhoto", Storage="_Photos", ThisKey="Id", OtherKey="DateId", DeleteRule="NO ACTION")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[Association(Name="FK_PersonDate", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Dates.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Dates.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="FK_VenueDate", Storage="_Venue", ThisKey="VenueId", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Dates.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Dates.Add(this);
						this._VenueId = value.Id;
					}
					else
					{
						this._VenueId = default(int);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}

        public ChronoGroup ChronoGroupKey { get; set; }

		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Date = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Date = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Date = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Date = null;
		}
	}
	
	[Table(Name="Interests")]
	public partial class Interest : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private int _PersonId;
		
		private double _Weighting;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnWeightingChanging(double value);
    partial void OnWeightingChanged();
    #endregion
		
		public Interest()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_Weighting", DbType="Float NOT NULL")]
		public double Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this.OnWeightingChanging(value);
					this.SendPropertyChanging();
					this._Weighting = value;
					this.SendPropertyChanged("Weighting");
					this.OnWeightingChanged();
				}
			}
		}
		
		[Association(Name="FK_PersonInterest", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Interests.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Interests.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Notes")]
	public partial class Note : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DateId;
		
		private string _Content;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _AmendedDate;
		
		private EntityRef<Date> _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateIdChanging(int value);
    partial void OnDateIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnAmendedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAmendedDateChanged();
    #endregion
		
		public Note()
		{
			this._Date = default(EntityRef<Date>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateId", DbType="Int NOT NULL")]
		public int DateId
		{
			get
			{
				return this._DateId;
			}
			set
			{
				if ((this._DateId != value))
				{
					if (this._Date.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateIdChanging(value);
					this.SendPropertyChanging();
					this._DateId = value;
					this.SendPropertyChanged("DateId");
					this.OnDateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_AmendedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AmendedDate
		{
			get
			{
				return this._AmendedDate;
			}
			set
			{
				if ((this._AmendedDate != value))
				{
					this.OnAmendedDateChanging(value);
					this.SendPropertyChanging();
					this._AmendedDate = value;
					this.SendPropertyChanged("AmendedDate");
					this.OnAmendedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_DateNote", Storage="_Date", ThisKey="DateId", OtherKey="Id", IsForeignKey=true)]
		public Date Date
		{
			get
			{
				return this._Date.Entity;
			}
			set
			{
				Date previousValue = this._Date.Entity;
				if (((previousValue != value) 
							|| (this._Date.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Date.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Date.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._DateId = value.Id;
					}
					else
					{
						this._DateId = default(int);
					}
					this.SendPropertyChanged("Date");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Persons")]
	public partial class Person : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _FileName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<int> _Age;
		
		private string _Town;

        private string _Country;
		
		private System.Nullable<bool> _IsFavourite;
		
		//private EntityRef<Country> _Country;
		
		private EntitySet<Date> _Dates;
		
		private EntitySet<Interest> _Interests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnIsFavouriteChanging(System.Nullable<bool> value);
    partial void OnIsFavouriteChanged();
    #endregion

		public Person()
		{
			//this._Country = default(EntityRef<Country>);
			this._Dates = new EntitySet<Date>(new Action<Date>(this.attach_Dates), new Action<Date>(this.detach_Dates));
			this._Interests = new EntitySet<Interest>(new Action<Interest>(this.attach_Interests), new Action<Interest>(this.detach_Interests));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
                if ((this._FirstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
			}
		}
		
		[Column(Storage="_SecondName", DbType="NVarChar(4000)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="NVarChar(4000)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(4000)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(4000)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Column(Storage="_Town", DbType="NVarChar(4000)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
        //[Column(Storage="_CountryId", DbType="Int")]
        //public System.Nullable<int> CountryId
        //{
        //    get
        //    {
        //        return this._CountryId;
        //    }
        //    set
        //    {
        //        if ((this._CountryId != value))
        //        {
        //            if (this._Country.HasLoadedOrAssignedValue)
        //            {
        //                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
        //            }
        //            this.OnCountryIdChanging(value);
        //            this.SendPropertyChanging();
        //            this._CountryId = value;
        //            this.SendPropertyChanged("CountryId");
        //            this.OnCountryIdChanged();
        //        }
        //    }
        //}
		
		[Column(Storage="_IsFavourite", DbType="Bit")]
		public System.Nullable<bool> IsFavourite
		{
			get
			{
				return this._IsFavourite;
			}
			set
			{
				if ((this._IsFavourite != value))
				{
					this.OnIsFavouriteChanging(value);
					this.SendPropertyChanging();
					this._IsFavourite = value;
					this.SendPropertyChanged("IsFavourite");
					this.OnIsFavouriteChanged();
				}
			}
		}

        [Column(Storage = "_Country", DbType = "NVarChar(4000)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if ((this._Country != value))
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnFileNameChanged();
                }
            }
        }

        //[Association(Name="FK_CountryPerson", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
        //public Country Country
        //{
        //    get
        //    {
        //        return this._Country.Entity;
        //    }
        //    set
        //    {
        //        Country previousValue = this._Country.Entity;
        //        if (((previousValue != value) 
        //                    || (this._Country.HasLoadedOrAssignedValue == false)))
        //        {
        //            this.SendPropertyChanging();
        //            if ((previousValue != null))
        //            {
        //                this._Country.Entity = null;
        //                previousValue.Persons.Remove(this);
        //            }
        //            this._Country.Entity = value;
        //            if ((value != null))
        //            {
        //                value.Persons.Add(this);
        //                this._CountryId = value.Id;
        //            }
        //            else
        //            {
        //                this._CountryId = default(Nullable<int>);
        //            }
        //            this.SendPropertyChanged("Country");
        //        }
        //    }
        //}
		
		[Association(Name="FK_PersonDate", Storage="_Dates", ThisKey="Id", OtherKey="PersonId", DeleteRule="NO ACTION")]
		public EntitySet<Date> Dates
		{
			get
			{
				return this._Dates;
			}
			set
			{
				this._Dates.Assign(value);
			}
		}
		
		[Association(Name="FK_PersonInterest", Storage="_Interests", ThisKey="Id", OtherKey="PersonId", DeleteRule="NO ACTION")]
		public EntitySet<Interest> Interests
		{
			get
			{
				return this._Interests;
			}
			set
			{
				this._Interests.Assign(value);
			}
		}

        public string FullName
        {
            get
            {
                return string.Format("{0} {1}", this.FirstName, this.SecondName);
            }
        }

        public string HomeViewItemDescription
        {
            get
            {
                if (this.Age != null && this.Town != null)
                    return string.Format("Age {0}, {1}", this.Age, this.Town);
                else if (this.Age != null)
                    return this.Age.ToString();
                else if (this.Age != null)
                    return this.Town;
                else
                    return "None";
            }
        }

        public WriteableBitmap Image { get; set; }

		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dates(Date entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Dates(Date entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Interests(Interest entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Interests(Interest entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="Photos")]
	public partial class Photo : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DateId;
		
		private string _Description;
		
		private string _CreatedDate;
		
		private string _FileName;
		
		private int _Width;
		
		private int _Height;
		
		private EntityRef<Date> _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateIdChanging(int value);
    partial void OnDateIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedDateChanging(string value);
    partial void OnCreatedDateChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    #endregion
		
		public Photo()
		{
			this._Date = default(EntityRef<Date>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateId", DbType="Int NOT NULL")]
		public int DateId
		{
			get
			{
				return this._DateId;
			}
			set
			{
				if ((this._DateId != value))
				{
					if (this._Date.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateIdChanging(value);
					this.SendPropertyChanging();
					this._DateId = value;
					this.SendPropertyChanged("DateId");
					this.OnDateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Association(Name="FK_DatePhoto", Storage="_Date", ThisKey="DateId", OtherKey="Id", IsForeignKey=true)]
		public Date Date
		{
			get
			{
				return this._Date.Entity;
			}
			set
			{
				Date previousValue = this._Date.Entity;
				if (((previousValue != value) 
							|| (this._Date.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Date.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Date.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._DateId = value.Id;
					}
					else
					{
						this._DateId = default(int);
					}
					this.SendPropertyChanged("Date");
				}
			}
		}

        public WriteableBitmap Image { get; set; }

        public bool IsSelected { get; set; }

		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Venues")]
	public partial class Venue : EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _Name;
		
		private double _Rating;
		
		private string _Address;
		
		private System.Nullable<bool> _IsFavourite;
		
		private EntitySet<Date> _Dates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIsFavouriteChanging(System.Nullable<bool> value);
    partial void OnIsFavouriteChanged();
    #endregion
		
		public Venue()
		{
			this._Dates = new EntitySet<Date>(new Action<Date>(this.attach_Dates), new Action<Date>(this.detach_Dates));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(4000)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_IsFavourite", DbType="Bit")]
		public System.Nullable<bool> IsFavourite
		{
			get
			{
				return this._IsFavourite;
			}
			set
			{
				if ((this._IsFavourite != value))
				{
					this.OnIsFavouriteChanging(value);
					this.SendPropertyChanging();
					this._IsFavourite = value;
					this.SendPropertyChanged("IsFavourite");
					this.OnIsFavouriteChanged();
				}
			}
		}
		
		[Association(Name="FK_VenueDate", Storage="_Dates", ThisKey="Id", OtherKey="VenueId", DeleteRule="NO ACTION")]
		public EntitySet<Date> Dates
		{
			get
			{
				return this._Dates;
			}
			set
			{
				this._Dates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dates(Date entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Dates(Date entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}

        public override string ToString()
        {
            return this.Name;
        }
	}
}
#pragma warning restore 1591
